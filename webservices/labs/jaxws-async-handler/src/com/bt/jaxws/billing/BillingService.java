
package com.bt.jaxws.billing;

import java.util.concurrent.Future;
import javax.jws.HandlerChain;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.FaultAction;
import javax.xml.ws.Response;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "BillingService", targetNamespace = "http://billing.jaxws.bt.com/")
@HandlerChain(file = "BillingService_handler.xml")
@SOAPBinding(style = SOAPBinding.Style.RPC)
@XmlSeeAlso({
    com.bt.jaxb.model.ObjectFactory.class,
    com.bt.jaxws.billing.ObjectFactory.class
})
public interface BillingService {


    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns javax.xml.ws.Response<com.bt.jaxws.billing.Invoice>
     */
    @WebMethod(operationName = "getInvoice")
    public Response<Invoice> getInvoiceAsync(
        @WebParam(name = "arg0", partName = "arg0")
        Customer arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1);

    /**
     * 
     * @param arg1
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getInvoice")
    public Future<?> getInvoiceAsync(
        @WebParam(name = "arg0", partName = "arg0")
        Customer arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "asyncHandler", partName = "asyncHandler")
        AsyncHandler<Invoice> asyncHandler);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns com.bt.jaxws.billing.Invoice
     * @throws InvalidCustomerException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://billing.jaxws.bt.com/BillingService/getInvoiceRequest", output = "http://billing.jaxws.bt.com/BillingService/getInvoiceResponse", fault = {
        @FaultAction(className = InvalidCustomerException_Exception.class, value = "http://billing.jaxws.bt.com/BillingService/getInvoice/Fault/InvalidCustomerException")
    })
    public Invoice getInvoice(
        @WebParam(name = "arg0", partName = "arg0")
        Customer arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws InvalidCustomerException_Exception
    ;

}
